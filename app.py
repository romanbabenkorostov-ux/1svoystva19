# src/app19.py
# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫: –∫–æ–Ω—Å–æ–ª—å + Streamlit
# –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫

import streamlit as st
import joblib
import numpy as np
import os
import itertools
from tabulate import tabulate
from typing import List, Tuple, Dict
from datetime import datetime
from io import StringIO
import sys
import time

# === –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –†–ï–ñ–ò–ú–ê (–ò–°–ü–†–ê–í–õ–ï–ù–û) ===
try:
    from streamlit.runtime.scriptrunner import get_script_run_ctx
    IN_STREAMLIT = get_script_run_ctx() is not None
except:
    IN_STREAMLIT = False

IS_LOCAL = not IN_STREAMLIT

# === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
log_buffer = StringIO() if IS_LOCAL else None

def log_print(*args, **kwargs):
    if IS_LOCAL and log_buffer:
        print(*args, **kwargs, file=log_buffer)

def log_input(prompt=""):
    if IS_LOCAL:
        print(prompt, end="")
        if log_buffer:
            log_print(prompt, end="")
        value = input()
        if log_buffer:
            log_print(value)
        return value
    return ""

# === –ü–ê–†–ê–ú–ï–¢–†–´ ===
PARAMS = [
    '–°–æ—Ä–≥.%', '–ú–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–π –∞–∑–æ—Ç. –º–≥/–∫–≥', '—Ä–ù', '–ü–ü–í', '–ü–æ—Ä–∏—Å—Ç–æ—Å—Ç—å',
    '>0.25 –º–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã', '–ù–∏—Ç—Ä–∞—Ç–Ω—ã–π –∞–∑–æ—Ç. –º–≥/–∫–≥', '–ê–º–º–æ–Ω–∏–π–Ω—ã–π –∞–∑–æ—Ç. –º–≥/–∫–≥',
    '–ü–æ–¥–≤–∏–∂–Ω—ã–π —Ñ–æ—Å—Ñ–æ—Ä. –º–≥/–∫–≥', '–ü–æ–¥–≤–∏–∂–Ω—ã–π –∫–∞–ª–∏–π. –º–≥/–∫–≥', '< 0.01. %',
    '< 0.001 –º–º. %', '–º–∏–∫—Ä–æ–ø–æ—Ä—ã –æ—Å—Ç–∞—Ç–æ—á–Ω—ã–µ', '–º–µ–∑–æ–ø–æ—Ä—ã –≤–ª–∞–≥–æ—Å–æ—Ö—Ä–∞–Ω—è—é—â–∏–µ',
    '–º–∞–∫—Ä–æ–ø–æ—Ä—ã –≤–ª–∞–≥–æ–ø—Ä–æ–≤–æ–¥—è—â–∏–µ', '–∑–∞–ø–∞—Å—ã –°–æ—Ä–≥', 'Ca2+. –º–º–æ–ª—å(+)/100–≥',
    'Mg2+. –º–º–æ–ª—å(+)/100–≥', '–ú–ì–í'
]

ACTION_NAMES = ['–†–∞—Å—Ç–µ–Ω–∏—è', '–ó–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ', '–ë–∏–æ—á–∞—Ä', '–ù–∏—Ç—Ä–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã', '–ü–ê–£-–¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã']

# === –ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–∏ (–° –û–ë–†–ê–ë–û–¢–ö–û–ô –û–®–ò–ë–û–ö) ===
def find_model() -> str:
    candidates = [
        'soil_predictor_19.pkl',  # –í –∫–æ—Ä–Ω–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        'models/soil_predictor_19.pkl',
        os.path.join(os.path.dirname(__file__), '..', 'models', 'soil_predictor_19.pkl'),
        '../models/soil_predictor_19.pkl'
    ]
    for path in candidates:
        if os.path.exists(path):
            return path
    
    # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    error_msg = """
    ‚ö†Ô∏è –û–®–ò–ë–ö–ê: –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!
    
    –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:
    1. –§–∞–π–ª soil_predictor_19.pkl –∑–∞–≥—Ä—É–∂–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    2. –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
    3. –§–∞–π–ª –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø–∞–ø–∫–µ models/
    
    –ò—Å–∫–∞–ª –≤: {}
    """.format('\n    '.join(candidates))
    
    raise FileNotFoundError(error_msg)

# === –ì–ï–ù–ï–†–ê–¶–ò–Ø 32 –í–ê–†–ò–ê–ù–¢–û–í (—Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫) ===
def get_all_variants():
    try:
        model = joblib.load(find_model())
    except Exception as e:
        if IN_STREAMLIT:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
            st.stop()
        else:
            raise
    
    combos = list(itertools.product([0, 1], repeat=5))
    variants = []
    
    if IN_STREAMLIT:
        progress_bar = st.progress(0)
        status_text = st.empty()
        status_text.text("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã...")
        
        for i, combo in enumerate(combos):
            X = np.array([combo])
            pred = model.predict(X)[0]
            pred_dict = {param: round(pred[j], 3) for j, param in enumerate(PARAMS)}
            variants.append((combo, pred_dict))
            progress_bar.progress((i + 1) / len(combos))
            status_text.text(f"–ì–æ—Ç–æ–≤–æ: {i + 1}/{len(combos)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        
        progress_bar.empty()
        status_text.empty()
    else:
        for combo in combos:
            X = np.array([combo])
            pred = model.predict(X)[0]
            pred_dict = {param: round(pred[j], 3) for j, param in enumerate(PARAMS)}
            variants.append((combo, pred_dict))
    
    return variants

# === –§–ò–õ–¨–¢–†–ê–¶–ò–Ø ===
def filter_variants(variants, param, target, tol=0.2):
    return [v for v in variants if abs(v[1][param] - target) <= tol * max(1, abs(target))]

# === –í–´–í–û–î –¢–û–ü-3 –° –¢–ê–ë–õ–ò–¶–ï–ô –°–†–ê–í–ù–ï–ù–ò–Ø ===
def show_top3(variants, targets, is_streamlit=False):
    top3 = sorted(variants, key=lambda x: sum(abs(x[1].get(p, 0) - targets.get(p, x[1].get(p, 0))) for p in targets))[:3]
    for i, (c, p) in enumerate(top3, 1):
        acts = " | ".join(f"{k}: {'–¥–∞' if v else '–Ω–µ—Ç'}" for k, v in zip(ACTION_NAMES, c))
        if is_streamlit:
            st.write(f"**–í–∞—Ä–∏–∞–Ω—Ç #{i}:** {acts}")
            
            # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É —Å —Ü–µ–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            table_data = []
            for param in PARAMS:
                row = [param, f"{p[param]:.3f}"]
                if param in targets:
                    row.append(f"{targets[param]:.3f}")
                    diff = abs(p[param] - targets[param])
                    row.append(f"{diff:.3f}")
                else:
                    row.append("‚Äî")
                    row.append("‚Äî")
                table_data.append(row)
            
            import pandas as pd
            df = pd.DataFrame(table_data, columns=["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", "–†–∞—Å—á—ë—Ç–Ω–æ–µ", "–¶–µ–ª–µ–≤–æ–µ", "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ"])
            st.dataframe(df, use_container_width=True)
        else:
            print(f"\n# {i}: {acts}")
            table = []
            for param in PARAMS:
                row = [param, f"{p[param]:.3f}"]
                if param in targets:
                    row.append(f"{targets[param]:.3f}")
                    diff = abs(p[param] - targets[param])
                    row.append(f"{diff:.3f}")
                else:
                    row.append("‚Äî")
                    row.append("‚Äî")
                table.append(row)
            
            print(tabulate(table, headers=["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", "–†–∞—Å—á—ë—Ç–Ω–æ–µ", "–¶–µ–ª–µ–≤–æ–µ", "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ"], tablefmt="grid"))
            log_print(f"\n# {i}: {acts}")
            log_print(tabulate(table, headers=["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", "–†–∞—Å—á—ë—Ç–Ω–æ–µ", "–¶–µ–ª–µ–≤–æ–µ", "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ"], tablefmt="grid"))

# === –ü–†–û–ì–ù–û–ó –ü–û –î–ï–ô–°–¢–í–ò–Ø–ú ===
def predict_by_actions(actions: Dict[str, int]) -> Dict[str, float]:
    try:
        model = joblib.load(find_model())
    except Exception as e:
        if IN_STREAMLIT:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
            st.stop()
        else:
            raise
    
    X = np.array([[actions.get(name, 0) for name in ACTION_NAMES]])
    pred = model.predict(X)[0]
    return {param: round(pred[i], 3) for i, param in enumerate(PARAMS)}

def show_prediction(pred: Dict[str, float], actions: Dict[str, int]):
    table = [[i+1, param, f"{pred[param]:.3f}"] for i, param in enumerate(PARAMS)]
    headers = ["‚Ññ", "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", "–ó–Ω–∞—á–µ–Ω–∏–µ"]
    acts_str = " | ".join(f"{k}: {'–¥–∞' if v else '–Ω–µ—Ç'}" for k, v in actions.items())

    if IN_STREAMLIT:
        st.table(table)
        st.success(f"–ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è: {acts_str}")
    else:
        print("\n" + "="*60)
        print("–î–ï–ô–°–¢–í–ò–Ø:")
        print(acts_str)
        print("="*60)
        print(tabulate(table, headers, tablefmt="grid"))
        print(f"\n–ì–æ—Ç–æ–≤–æ! –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è: {acts_str}")
        log_print("\n" + "="*60)
        log_print("–î–ï–ô–°–¢–í–ò–Ø:")
        log_print(acts_str)
        log_print("="*60)
        log_print(tabulate(table, headers, tablefmt="grid"))
        log_print(f"\n–ì–æ—Ç–æ–≤–æ! –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è: {acts_str}")

# === –†–ï–ñ–ò–ú 1: –ü–†–û–ì–ù–û–ó –ü–û –î–ï–ô–°–¢–í–ò–Ø–ú ===
def mode_predict():
    if IN_STREAMLIT:
        st.header("üå± –ü–†–û–ì–ù–û–ó –ü–û –î–ï–ô–°–¢–í–ò–Ø–ú")
    else:
        print("–ü–†–û–ì–ù–û–ó –ü–û –î–ï–ô–°–¢–í–ò–Ø–ú (19 –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π)")
        log_print("–ü–†–û–ì–ù–û–ó –ü–û –î–ï–ô–°–¢–í–ò–Ø–ú (19 –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π)")

    actions = {}
    if IN_STREAMLIT:
        cols = st.columns(5)
        for i, name in enumerate(ACTION_NAMES):
            with cols[i]:
                val = st.checkbox(name, value=False)
                actions[name] = 1 if val else 0
        if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å", type="primary"):
            with st.spinner("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ..."):
                pred = predict_by_actions(actions)
                show_prediction(pred, actions)
    else:
        for name in ACTION_NAMES:
            while True:
                val = log_input(f"{name} (–¥–∞/–Ω–µ—Ç): ").strip().lower()
                if val in ['–¥–∞', '1', 'yes', 'y']:
                    actions[name] = 1
                    break
                elif val in ['–Ω–µ—Ç', '0', 'no', 'n', '']:
                    actions[name] = 0
                    break
                else:
                    print("–í–≤–µ–¥–∏—Ç–µ: –¥–∞ / –Ω–µ—Ç")
        pred = predict_by_actions(actions)
        show_prediction(pred, actions)

# === –†–ï–ñ–ò–ú 2: –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø –ü–û –¶–ï–õ–Ø–ú ===
def mode_recommend():
    if IN_STREAMLIT:
        st.header("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø –ü–û –¶–ï–õ–Ø–ú")
    else:
        print("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø –ü–û –¶–ï–õ–Ø–ú (–ø–æ—à–∞–≥–æ–≤–æ)")
        log_print("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø –ü–û –¶–ï–õ–Ø–ú (–ø–æ—à–∞–≥–æ–≤–æ)")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    if IN_STREAMLIT:
        if 'variants' not in st.session_state:
            with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 32 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤..."):
                try:
                    st.session_state.variants = get_all_variants()
                    st.session_state.current = st.session_state.variants.copy()
                    st.session_state.targets = {}
                    st.session_state.remaining = PARAMS.copy()
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
                    st.stop()
        
        current = st.session_state.current
        targets = st.session_state.targets
        remaining = st.session_state.remaining
    else:
        if not hasattr(mode_recommend, "initialized"):
            print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 32 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤...")
            mode_recommend.variants = get_all_variants()
            mode_recommend.current = mode_recommend.variants.copy()
            mode_recommend.targets = {}
            mode_recommend.remaining = PARAMS.copy()
            mode_recommend.initialized = True
        current = mode_recommend.current
        targets = mode_recommend.targets
        remaining = mode_recommend.remaining

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
    while remaining:
        if not IN_STREAMLIT:
            print(f"\n–í–ê–†–ò–ê–ù–¢–û–í: {len(current)} | –ü–ê–†–ê–ú–ï–¢–†–û–í: {len(remaining)}")
            log_print(f"\n–í–ê–†–ò–ê–ù–¢–û–í: {len(current)} | –ü–ê–†–ê–ú–ï–¢–†–û–í: {len(remaining)}")
            ranges = {p: (min(v[1][p] for v in current), max(v[1][p] for v in current)) for p in remaining}
            for i, p in enumerate(remaining, 1):
                mn, mx = ranges[p]
                print(f"[{i}] {p} ‚Üí [{mn:.2f}‚Äì{mx:.2f}]")
                log_print(f"[{i}] {p} ‚Üí [{mn:.2f}‚Äì{mx:.2f}]")

            choice = log_input("\n–ù–æ–º–µ—Ä (Enter ‚Äî –∫–æ–Ω–µ—Ü): ").strip()
            if not choice:
                print("–í—ã—Ö–æ–¥.")
                log_print("–í—ã—Ö–æ–¥.")
                break
            try:
                idx = int(choice) - 1
                param = remaining[idx]
            except:
                print("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞!")
                log_print("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞!")
                continue

            val = log_input(f"–¶–µ–ª—å {param}: ").strip()
            if not val:
                print("–ü—Ä–æ–ø—É—â–µ–Ω–æ.")
                log_print("–ü—Ä–æ–ø—É—â–µ–Ω–æ.")
                continue
            try:
                target = float(val)
            except:
                print("–ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ!")
                log_print("–ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ!")
                continue

        else:
            st.write(f"**–û—Å—Ç–∞–ª–æ—Å—å –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:** {len(current)} | **–ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:** {len(remaining)}")
            ranges = {p: (min(v[1][p] for v in current), max(v[1][p] for v in current)) for p in remaining}
            options = [f"{i+1}. {p} ‚Üí [{ranges[p][0]:.2f}‚Äì{ranges[p][1]:.2f}]" for i, p in enumerate(remaining)]
            
            # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            select_key = f"param_select_{len(remaining)}_{hash(tuple(remaining))}"
            choice = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä:", options, key=select_key)
            idx = int(choice.split('.')[0]) - 1
            param = remaining[idx]
            
            # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
            input_key = f"target_input_{param.replace(' ', '_').replace('.', '_')}_{len(current)}"
            target = st.number_input(f"–¶–µ–ª—å –¥–ª—è **{param}**:", value=ranges[param][0], step=0.1, format="%.3f", key=input_key)
            
            # –î–≤–µ –∫–Ω–æ–ø–∫–∏: –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–∞ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            col1, col2 = st.columns(2)
            button_key = f"apply_btn_{len(remaining)}_{len(current)}"
            calc_key = f"calc_btn_{len(remaining)}_{len(current)}"
            
            with col1:
                apply_clicked = st.button("‚ûï –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", type="primary", key=button_key)
            with col2:
                calc_clicked = st.button("‚úÖ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–∞ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö", type="secondary", key=calc_key, disabled=(len(targets) == 0))
            
            if calc_clicked and targets:
                # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤–≤–æ–¥ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                show_top3(current, targets, is_streamlit=True)
                
                # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞
                if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", type="secondary"):
                    st.session_state.variants = get_all_variants()
                    st.session_state.current = st.session_state.variants.copy()
                    st.session_state.targets = {}
                    st.session_state.remaining = PARAMS.copy()
                    st.rerun()
                st.stop()
            
            if not apply_clicked:
                st.stop()

        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
        targets[param] = target
        current = filter_variants(current, param, target)
        if not current:
            msg = "‚ö†Ô∏è –ù–ï–í–û–ó–ú–û–ñ–ù–û! –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
            if IN_STREAMLIT:
                st.error(msg)
                # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", type="primary"):
                    st.session_state.variants = get_all_variants()
                    st.session_state.current = st.session_state.variants.copy()
                    st.session_state.targets = {}
                    st.session_state.remaining = PARAMS.copy()
                    st.rerun()
                st.stop()
            else:
                print(msg)
                log_print(msg)
            break
        remaining.pop(idx)

        if not IN_STREAMLIT:
            show_top3(current, targets, is_streamlit=False)
        else:
            st.session_state.current = current
            st.session_state.targets = targets
            st.session_state.remaining = remaining
            show_top3(current, targets, is_streamlit=True)
            st.rerun()

    # –§–∏–Ω–∞–ª
    if current and not remaining:
        best = min(current, key=lambda x: sum(abs(x[1].get(p, 0) - targets.get(p, x[1].get(p, 0))) for p in targets))
        acts = " | ".join(f"{k}: {'–¥–∞' if v else '–Ω–µ—Ç'}" for k, v in zip(ACTION_NAMES, best[0]))
        
        if IN_STREAMLIT:
            st.success("‚úÖ –§–ò–ù–ê–õ–¨–ù–ê–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:")
            st.write(f"**–î–µ–π—Å—Ç–≤–∏—è:** {acts}")
            
            # –ò—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ –≤—Å–µ–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            st.subheader("–ò—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            table_data = []
            for param in PARAMS:
                row = [param, f"{best[1][param]:.3f}"]
                if param in targets:
                    row.append(f"{targets[param]:.3f}")
                    diff = abs(best[1][param] - targets[param])
                    row.append(f"{diff:.3f}")
                else:
                    row.append("‚Äî")
                    row.append("‚Äî")
                table_data.append(row)
            
            import pandas as pd
            df = pd.DataFrame(table_data, columns=["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", "–†–∞—Å—á—ë—Ç–Ω–æ–µ", "–¶–µ–ª–µ–≤–æ–µ", "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ"])
            st.dataframe(df, use_container_width=True)
            
            # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞
            if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", type="secondary"):
                st.session_state.variants = get_all_variants()
                st.session_state.current = st.session_state.variants.copy()
                st.session_state.targets = {}
                st.session_state.remaining = PARAMS.copy()
                st.rerun()
        else:
            msg = "\n–§–ò–ù–ê–õ–¨–ù–ê–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:\n" + acts
            for k, v in best[1].items():
                msg += f"\n  {k}: {v:.3f}"
            print(msg)
            log_print(msg)

# === –ö–û–ù–°–û–õ–¨–ù–´–ô –†–ï–ñ–ò–ú ===
def run_console():
    print("–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤ –ø–æ—á–≤ –ø–æ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –∞–≥—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏ –±–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è")
    print("="*50)
    print("[1] –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º")
    print("[2] –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ —Ü–µ–ª—è–º")
    choice = log_input("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (1 –∏–ª–∏ 2): ").strip()

    if choice == "1":
        mode_predict()
    elif choice == "2":
        mode_recommend()
    else:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
        log_print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")

    # === –°–û–•–†–ê–ù–ï–ù–ò–ï –õ–û–ì–ê ===
    if IS_LOCAL and log_buffer:
        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        log_filename = f"app19_log_{timestamp}.txt"
        log_path = os.path.join(os.path.dirname(__file__), log_filename)
        with open(log_path, 'w', encoding='utf-8') as f:
            f.write(log_buffer.getvalue())
        print(f"\n–õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {log_path}")

# === STREAMLIT –†–ï–ñ–ò–ú ===
def run_streamlit():
    st.set_page_config(page_title="–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤ –ø–æ—á–≤", layout="wide", page_icon="üå±")
    
    st.title("üå± –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤ –ø–æ—á–≤ –ø–æ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –∞–≥—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏ –±–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–æ–¥–µ–ª–∏
    try:
        find_model()
    except FileNotFoundError as e:
        st.error(str(e))
        st.info("üí° **–†–µ—à–µ–Ω–∏–µ:** –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª `soil_predictor_19.pkl` –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π GitHub")
        st.stop()

    mode = st.radio("–†–µ–∂–∏–º:", ["–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ —Ü–µ–ª—è–º"], horizontal=True)

    if mode == "–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º":
        mode_predict()
    else:
        mode_recommend()

# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    if IN_STREAMLIT:
        run_streamlit()
    else:
        run_console()