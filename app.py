# app.py ‚Äî –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è 19 –ø–æ—á–≤–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
import numpy as np
import joblib
import os
import itertools
from tabulate import tabulate

# === –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ Streamlit ===
def is_streamlit():
    try:
        import streamlit as st
        return hasattr(st, 'runtime') and st.runtime.exists()
    except:
        return False

# === –ü—É—Ç–∏ —Å –æ—Ç–ª–∞–¥–∫–æ–π ===
if os.path.exists('models/soil_predictor.pkl'):
    model_path = 'models/soil_predictor.pkl'
elif os.path.exists('../models/soil_predictor.pkl'):
    model_path = '../models/soil_predictor.pkl'
else:
    project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    model_path = os.path.join(project_root, 'models', 'soil_predictor.pkl')

print(f"[DEBUG] –ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–∏: {model_path}")
print(f"[DEBUG] –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")

if not os.path.exists(model_path):
    possible_paths = ['soil_predictor.pkl', 'models/soil_predictor.pkl', '../models/soil_predictor.pkl']
    for path in possible_paths:
        if os.path.exists(path):
            model_path = path
            break
    else:
        raise FileNotFoundError(f"–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ò—Å–∫–∞–ª–∏: {possible_paths}")

model = joblib.load(model_path)
print(f"[DEBUG] –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {model_path}")

# === –í–°–ï 19 –ü–ê–†–ê–ú–ï–¢–†–û–í (–≤ –ø–æ—Ä—è–¥–∫–µ –º–æ–¥–µ–ª–∏!) ===
PARAMS = [
    '–°–æ—Ä–≥.%',                     # 0
    '–ú–∏–Ω. N',                     # 1
    'pH',                         # 2
    '–ü–ü–í %',                      # 3
    '–ü–æ—Ä–∏—Å—Ç–æ—Å—Ç—å %',               # 4
    '–í–æ–¥–æ–ø—Ä–æ—á–Ω—ã–µ –∞–≥—Ä–µ–≥–∞—Ç—ã %',     # 5
    'N-NO‚ÇÉ',                      # 6
    'N-NH‚ÇÑ',                      # 7
    'P‚ÇÇO‚ÇÖ',                       # 8
    'K‚ÇÇO',                        # 9
    '–§–∏–∑. –≥–ª–∏–Ω–∞ %',               # 10
    '–ò–ª %',                       # 11
    '–ú–∏–∫—Ä–æ–ø–æ—Ä—ã',                  # 12
    '–ú–µ–∑–æ–ø–æ—Ä—ã',                   # 13
    '–ú–∞–∫—Ä–æ–ø–æ—Ä—ã',                  # 14
    '–ó–∞–ø–∞—Å—ã –°–æ—Ä–≥',                # 15
    'Ca¬≤‚Å∫',                       # 16
    'Mg¬≤‚Å∫',                       # 17
    '–ú–ì–í %'                       # 18
]

# === –§–∞–∫—Ç–æ—Ä—ã (5 –±–∏–Ω–∞—Ä–Ω—ã—Ö) ===
action_names = ['–†–∞—Å—Ç–µ–Ω–∏—è', '–ó–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ', '–ë–∏–æ—á–∞—Ä', '–ù–∏—Ç—Ä–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã', '–ü–ê–£-–¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã']
combos = list(itertools.product([0, 1], repeat=5))

# === –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ ===
def predict(combo):
    X = np.array([combo])
    pred = model.predict(X)[0]
    return {param: round(float(pred[i]), 3) for i, param in enumerate(PARAMS)}

# === –í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã (32) ===
all_variants = [(combo, predict(combo)) for combo in combos]
print(f"[DEBUG] –°–æ–∑–¥–∞–Ω–æ {len(all_variants)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")

# === –£–º–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω ===
def get_range(values):
    if not values:
        return "‚Äî"
    vals = sorted(set(values))
    if len(vals) == 1:
        return f"{vals[0]:.3f}".rstrip('0').rstrip('.')
    
    intervals = []
    start = prev = vals[0]
    for v in vals[1:]:
        if abs(v - prev) > 1e-3:
            intervals.append(format_interval(start, prev))
            start = v
        prev = v
    intervals.append(format_interval(start, prev))
    return "; ".join(intervals)

def format_interval(start, end):
    if abs(start - end) < 1e-3:
        return f"{start:.3f}".rstrip('0').rstrip('.')
    else:
        s = f"{start:.3f}".rstrip('0').rstrip('.')
        e = f"{end:.3f}".rstrip('0').rstrip('.')
        return f"{s}‚Äì{e}"

# === –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è ===
def filter_variants(variants, param, target, tolerance=0.15):
    filtered = [v for v in variants if abs(v[1][param] - target) <= tolerance * max(1, abs(target))]
    print(f"[DEBUG] –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è {param}={target}: {len(variants)} ‚Üí {len(filtered)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
    return filtered

# === –¢–æ–ø-3 ===
def get_top3(variants, targets):
    scored = []
    for combo, pred in variants:
        error = sum(abs(pred[p] - targets.get(p, pred[p])) for p in targets)
        scored.append((error, combo, pred))
    return sorted(scored)[:3]

# === –ü–æ–ª—É—á–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ===
def get_param_ranges(variants):
    ranges = {}
    for param in PARAMS:
        vals = [v[1][param] for v in variants]
        if vals:
            ranges[param] = {
                'min': min(vals),
                'max': max(vals),
                'values': sorted(set(vals)),
                'range_str': get_range(vals)
            }
    print(f"[DEBUG] –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è {len(variants)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:")
    for p, r in ranges.items():
        print(f"  {p}: {r['range_str']}")
    return ranges

# === –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —à–∞–≥ –¥–ª—è —Å–ª–∞–π–¥–µ—Ä–∞ ===
def get_step(param):
    if param in ['pH', '–ú–ì–í %']:
        return 0.01
    elif param in ['–ú–∏–Ω. N', 'N-NO‚ÇÉ', 'N-NH‚ÇÑ', 'P‚ÇÇO‚ÇÖ', 'K‚ÇÇO', 'Ca¬≤‚Å∫', 'Mg¬≤‚Å∫', '–ó–∞–ø–∞—Å—ã –°–æ—Ä–≥']:
        return 0.5
    elif param in ['–°–æ—Ä–≥.%', '–ü–ü–í %', '–ü–æ—Ä–∏—Å—Ç–æ—Å—Ç—å %', '–í–æ–¥–æ–ø—Ä–æ—á–Ω—ã–µ –∞–≥—Ä–µ–≥–∞—Ç—ã %', '–§–∏–∑. –≥–ª–∏–Ω–∞ %', '–ò–ª %']:
        return 0.1
    elif '–ø–æ—Ä—ã' in param.lower():
        return 0.01
    else:
        return 0.1

# === –ö–û–ù–°–û–õ–¨–ù–´–ô –†–ï–ñ–ò–ú ===
def console_mode():
    current_variants = all_variants.copy()
    targets = {}
    remaining_params = PARAMS.copy()

    print("–°–ò–°–¢–ï–ú–ê –ú–û–î–ï–õ–ò–†–û–í–ê–ù–ò–Ø 19 –ü–û–ß–í–ï–ù–ù–´–• –ü–ê–†–ê–ú–ï–¢–†–û–í")
    print("=" * 85)

    while remaining_params:
        print(f"\n–î–û–°–¢–£–ü–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ ({len(current_variants)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤):")
        print("-" * 65)
        
        ranges = get_param_ranges(current_variants)
        
        for i, p in enumerate(remaining_params, 1):
            print(f"[{i:2}] {p:<35} ‚Üí [{ranges[p]['range_str']}]")

        choice = input("\n–ù–æ–º–µ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (–∏–ª–∏ Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è): ").strip()
        if not choice:
            break

        try:
            idx = int(choice) - 1
            if not (0 <= idx < len(remaining_params)):
                raise ValueError
            param = remaining_params[idx]
        except:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä!")
            continue

        target_input = input(f"–¶–µ–ª—å {param} [{ranges[param]['range_str']}]: ").strip()
        if not target_input:
            remaining_params.pop(idx)
            continue

        try:
            target = float(target_input)
            min_v, max_v = ranges[param]['min'], ranges[param]['max']
            if target < min_v or target > max_v:
                target = max(min_v, min(target, max_v))
                print(f"[INFO] –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–æ: {target:.3f}")
        except:
            print("–ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ!")
            continue

        targets[param] = target
        current_variants = filter_variants(current_variants, param, target)
        
        if not current_variants:
            print("[ERROR] –ù–ï–í–û–ó–ú–û–ñ–ù–û! –ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
            break

        remaining_params.pop(idx)

        top3 = get_top3(current_variants, targets)
        print("\n–¢–û–ü-3 –í–ê–†–ò–ê–ù–¢–ê:")
        table = []
        for _, combo, pred in top3:
            row = [f"{pred[p]:.3f}".rstrip('0').rstrip('.') for p in targets]
            table.append(row)
        if table:
            print(tabulate(table, headers=list(targets.keys()), tablefmt="grid"))
        for i, (_, combo, pred) in enumerate(top3, 1):
            actions = " | ".join(f"{k}: {'–¥–∞' if v else '–Ω–µ—Ç'}" for k, v in zip(action_names, combo))
            print(f"#{i}: {actions}")
        print()

    if current_variants:
        best_combo, best_pred = min(current_variants, key=lambda x: sum(abs(x[1][p] - targets.get(p, x[1][p])) for p in targets))
        print("\n–§–ò–ù–ê–õ–¨–ù–ê–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:")
        actions = " | ".join(f"{k}: {'–¥–∞' if v else '–Ω–µ—Ç'}" for k, v in zip(action_names, best_combo))
        print(actions)
        print({k: f"{v:.3f}".rstrip('0').rstrip('.') for k, v in best_pred.items() if k in targets})
    else:
        print("–¶–µ–ª—å –Ω–µ–¥–æ—Å—Ç–∏–∂–∏–º–∞.")

# === –í–ï–ë-–†–ï–ñ–ò–ú (Streamlit) ===
def web_mode():
    import streamlit as st
    import pandas as pd
    
    st.set_page_config(page_title="–ü–æ—á–≤–µ–Ω–Ω—ã–π –ò–ò", layout="wide")
    st.title("üå± –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ 19 –ø–æ—á–≤–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    
    st.markdown("""
    –°–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ –∞–≥—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –ø–æ—á–≤—ã.
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–ª–∏—è–Ω–∏–µ 5 —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –Ω–∞ 19 –ø–æ—á–≤–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
    """)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if 'current_variants' not in st.session_state:
        with st.spinner('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ —Ä–∞—Å—á—ë—Ç –Ω–∞—á–∞–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤...'):
            st.session_state.current_variants = all_variants.copy()
            st.session_state.targets = {}
            st.session_state.selected_param = None
            st.session_state.step = 0
            print(f"[DEBUG WEB] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {len(all_variants)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")

    current_variants = st.session_state.current_variants
    targets = st.session_state.targets
    remaining_params = [p for p in PARAMS if p not in targets]

    print(f"[DEBUG WEB] –®–∞–≥ {st.session_state.step}: {len(current_variants)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –æ—Å—Ç–∞–ª–æ—Å—å: {len(remaining_params)}")

    # –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if not remaining_params or len(current_variants) <= 3:
        st.success("‚úÖ –ì–û–¢–û–í–û! –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω—ã")
        top3 = get_top3(current_variants, targets)
        
        print("[DEBUG WEB] –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–æ–ø-3:")
        for i, (score, combo, pred) in enumerate(top3, 1):
            print(f"  #{i}: score={score:.3f}")
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–ø-3
        st.markdown("### üèÜ –¢–û–ü-3 –í–ê–†–ò–ê–ù–¢–ê")
        
        if targets:
            table_data = []
            for i, (error, combo, pred) in enumerate(top3, 1):
                row = {'#': i}
                for p in targets:
                    row[p] = f"{pred[p]:.3f}".rstrip('0').rstrip('.')
                row['–û—à–∏–±–∫–∞'] = f"{error:.3f}"
                table_data.append(row)
            
            df = pd.DataFrame(table_data)
            st.dataframe(df, hide_index=True, width='stretch')
        
        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        st.markdown("---")
        for i, (error, combo, pred) in enumerate(top3, 1):
            actions = " | ".join(f"**{k}**: {'‚úÖ –¥–∞' if v else '‚ùå –Ω–µ—Ç'}" for k, v in zip(action_names, combo))
            st.markdown(f"**#{i}:** {actions}")
        
        st.markdown("---")
        
        # –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        for i, (error, combo, pred) in enumerate(top3, 1):
            with st.expander(f"üî¨ –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –≤–∞—Ä–∏–∞–Ω—Ç–∞ {i}"):
                st.markdown("#### –ê–≥—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
                cols = st.columns(5)
                for j, (name, val) in enumerate(zip(action_names, combo)):
                    emoji = "‚úÖ" if val else "‚ùå"
                    cols[j].markdown(f"**{name}**<br>{emoji}", unsafe_allow_html=True)
                
                st.divider()
                st.markdown("#### –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.markdown("**–û—Ä–≥–∞–Ω–∏–∫–∞ –∏ –ø–∏—Ç–∞–Ω–∏–µ:**")
                    st.metric("–°–æ—Ä–≥.%", f"{pred['–°–æ—Ä–≥.%']:.2f}")
                    st.metric("–ú–∏–Ω. N", f"{pred['–ú–∏–Ω. N']:.1f}")
                    st.metric("N-NO‚ÇÉ", f"{pred['N-NO‚ÇÉ']:.1f}")
                    st.metric("N-NH‚ÇÑ", f"{pred['N-NH‚ÇÑ']:.1f}")
                    st.metric("P‚ÇÇO‚ÇÖ", f"{pred['P‚ÇÇO‚ÇÖ']:.1f}")
                    st.metric("K‚ÇÇO", f"{pred['K‚ÇÇO']:.1f}")
                
                with col2:
                    st.markdown("**–§–∏–∑–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞:**")
                    st.metric("pH", f"{pred['pH']:.2f}")
                    st.metric("–ü–ü–í %", f"{pred['–ü–ü–í %']:.1f}")
                    st.metric("–ü–æ—Ä–∏—Å—Ç–æ—Å—Ç—å %", f"{pred['–ü–æ—Ä–∏—Å—Ç–æ—Å—Ç—å %']:.1f}")
                    st.metric("–í–æ–¥–æ–ø—Ä–æ—á–Ω—ã–µ –∞–≥—Ä–µ–≥–∞—Ç—ã %", f"{pred['–í–æ–¥–æ–ø—Ä–æ—á–Ω—ã–µ –∞–≥—Ä–µ–≥–∞—Ç—ã %']:.1f}")
                    st.metric("–ú–ì–í %", f"{pred['–ú–ì–í %']:.2f}")
                
                with col3:
                    st.markdown("**–ì—Ä–∞–Ω—É–ª–æ–º–µ—Ç—Ä–∏—è –∏ –ø–æ—Ä—ã:**")
                    st.metric("–§–∏–∑. –≥–ª–∏–Ω–∞ %", f"{pred['–§–∏–∑. –≥–ª–∏–Ω–∞ %']:.1f}")
                    st.metric("–ò–ª %", f"{pred['–ò–ª %']:.1f}")
                    st.metric("–ú–∏–∫—Ä–æ–ø–æ—Ä—ã", f"{pred['–ú–∏–∫—Ä–æ–ø–æ—Ä—ã']:.3f}")
                    st.metric("–ú–µ–∑–æ–ø–æ—Ä—ã", f"{pred['–ú–µ–∑–æ–ø–æ—Ä—ã']:.3f}")
                    st.metric("–ú–∞–∫—Ä–æ–ø–æ—Ä—ã", f"{pred['–ú–∞–∫—Ä–æ–ø–æ—Ä—ã']:.3f}")
                    st.metric("Ca¬≤‚Å∫", f"{pred['Ca¬≤‚Å∫']:.1f}")
                    st.metric("Mg¬≤‚Å∫", f"{pred['Mg¬≤‚Å∫']:.1f}")
                    st.metric("–ó–∞–ø–∞—Å—ã –°–æ—Ä–≥", f"{pred['–ó–∞–ø–∞—Å—ã –°–æ—Ä–≥']:.1f}")
        
        if st.button("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", type="primary"):
            st.session_state.clear()
            st.rerun()
        return

    # –®–ê–ì 1: –í—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    if st.session_state.selected_param is None:
        st.markdown(f"### –®–∞–≥ {st.session_state.step + 1} –∏–∑ {len(PARAMS)}: –í—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–∞")
        st.info(f"üìä –î–æ—Å—Ç—É–ø–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: **{len(current_variants)}** | –ó–∞–¥–∞–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: **{len(targets)}**")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ—Å—á—ë—Ç–µ
        with st.spinner('üîÑ –†–∞—Å—á—ë—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤...'):
            ranges = get_param_ranges(current_variants)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        st.markdown("#### –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        
        categories = {
            "–û—Ä–≥–∞–Ω–∏–∫–∞ –∏ –∞–∑–æ—Ç": ['–°–æ—Ä–≥.%', '–ú–∏–Ω. N', 'N-NO‚ÇÉ', 'N-NH‚ÇÑ', '–ó–∞–ø–∞—Å—ã –°–æ—Ä–≥'],
            "–ú–∞–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç—ã": ['P‚ÇÇO‚ÇÖ', 'K‚ÇÇO', 'Ca¬≤‚Å∫', 'Mg¬≤‚Å∫'],
            "–§–∏–∑–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞": ['pH', '–ü–ü–í %', '–ü–æ—Ä–∏—Å—Ç–æ—Å—Ç—å %', '–í–æ–¥–æ–ø—Ä–æ—á–Ω—ã–µ –∞–≥—Ä–µ–≥–∞—Ç—ã %', '–ú–ì–í %'],
            "–ì—Ä–∞–Ω—É–ª–æ–º–µ—Ç—Ä–∏—è": ['–§–∏–∑. –≥–ª–∏–Ω–∞ %', '–ò–ª %'],
            "–ü–æ—Ä–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ": ['–ú–∏–∫—Ä–æ–ø–æ—Ä—ã', '–ú–µ–∑–æ–ø–æ—Ä—ã', '–ú–∞–∫—Ä–æ–ø–æ—Ä—ã']
        }
        
        for category, params in categories.items():
            available = [p for p in params if p in remaining_params]
            if available:
                with st.expander(f"üìÅ {category} ({len(available)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)", expanded=True):
                    cols = st.columns(min(3, len(available)))
                    for i, param in enumerate(available):
                        with cols[i % 3]:
                            st.caption(f"**{param}**")
                            st.caption(f"–î–∏–∞–ø–∞–∑–æ–Ω: {ranges[param]['range_str']}")
                            if st.button(f"–í—ã–±—Ä–∞—Ç—å", key=f"btn_{param}", width='stretch'):
                                st.session_state.selected_param = param
                                print(f"[DEBUG WEB] –í—ã–±—Ä–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä: {param}")
                                st.rerun()
        
        st.progress(st.session_state.step / len(PARAMS))
        return

    # –®–ê–ì 2: –í–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    param = st.session_state.selected_param
    ranges = get_param_ranges(current_variants)
    param_range = ranges[param]
    
    st.markdown(f"### –®–∞–≥ {st.session_state.step + 1} –∏–∑ {len(PARAMS)}: {param}")
    st.info(f"üìä **–î–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω:** `{param_range['range_str']}`")
    
    min_v = param_range['min']
    max_v = param_range['max']
    
    # –ó–∞—â–∏—Ç–∞ –æ—Ç min = max
    if abs(max_v - min_v) < 1e-6:
        st.warning(f"‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ: **{min_v:.3f}**")
        
        col1, col2 = st.columns(2)
        
        if col1.button("‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ", type="primary", width='stretch'):
            print(f"[DEBUG WEB] –ü—Ä–∏–º–µ–Ω—è–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ {param}={min_v}")
            
            with st.spinner(f'üîÑ –ü–µ—Ä–µ—Å—á—ë—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è {param} = {min_v}...'):
                targets[param] = min_v
                new_variants = filter_variants(current_variants, param, min_v)
            
            st.session_state.current_variants = new_variants
            st.session_state.targets = targets
            st.session_state.selected_param = None
            st.session_state.step += 1
            st.success(f"‚úÖ –û—Å—Ç–∞–ª–æ—Å—å –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {len(new_variants)}")
            st.rerun()
        
        if col2.button("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä", width='stretch'):
            st.session_state.selected_param = None
            st.session_state.step += 1
            st.rerun()
        return
    
    step = get_step(param)
    target = st.slider(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ",
        min_value=float(min_v),
        max_value=float(max_v),
        value=float((min_v + max_v) / 2),
        step=float(step),
        key=f"slider_{param}_{st.session_state.step}"
    )

    col1, col2, col3 = st.columns(3)
    
    if col1.button("‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å", type="primary", width='stretch'):
        print(f"[DEBUG WEB] –ü—Ä–∏–º–µ–Ω—è–µ–º {param}={target}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        with st.spinner(f'üîÑ –ü–µ—Ä–µ—Å—á—ë—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è {param} = {target}...'):
            targets[param] = target
            new_variants = filter_variants(current_variants, param, target)
        
        if not new_variants:
            st.error("‚ö†Ô∏è –° —Ç–∞–∫–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –Ω–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ.")
        else:
            st.session_state.current_variants = new_variants
            st.session_state.targets = targets
            st.session_state.selected_param = None
            st.session_state.step += 1
            st.success(f"‚úÖ –û—Å—Ç–∞–ª–æ—Å—å –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {len(new_variants)}")
            st.rerun()

    if col2.button("üîô –î—Ä—É–≥–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä", width='stretch'):
        st.session_state.selected_param = None
        st.rerun()
    
    if col3.button("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", width='stretch'):
        st.session_state.selected_param = None
        st.session_state.step += 1
        st.rerun()

    # –ü—Ä–æ–≥—Ä–µ—Å—Å
    st.progress(st.session_state.step / len(PARAMS))

# === –ó–ê–ü–£–°–ö ===
if __name__ == '__main__':
    if is_streamlit():
        web_mode()
    else:
        console_mode()
